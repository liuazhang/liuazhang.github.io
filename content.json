{"meta":{"title":"啊璋の博客","subtitle":"且将新火试新茶，诗酒趁年华","description":"记录学习的点点滴滴","author":"吉光片羽","url":"http://liuazhang.com","root":"/"},"pages":[{"title":"All categories","date":"2020-05-12T11:11:54.000Z","updated":"2020-05-12T11:13:05.047Z","comments":true,"path":"categories/index.html","permalink":"http://liuazhang.com/categories/index.html","excerpt":"","text":""},{"title":"All tags","date":"2020-05-12T11:10:34.000Z","updated":"2020-05-12T11:11:21.374Z","comments":true,"path":"tags/index.html","permalink":"http://liuazhang.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"正则表达式语法","slug":"正则表达式语法","date":"2020-05-16T06:55:22.000Z","updated":"2020-05-17T12:37:46.763Z","comments":true,"path":"2020/05/16/正则表达式语法/","link":"","permalink":"http://liuazhang.com/2020/05/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95/","excerpt":"正则表达式语法普通字符字母、数字、汉字、下划线等等，匹配与之相同的字符。","text":"正则表达式语法普通字符字母、数字、汉字、下划线等等，匹配与之相同的字符。 简单的转义字符 字符 含义 \\n 代表换行符 \\t 制表符 \\\\ 代表\\本身 \\^, \\$, \\., \\(, \\), \\{, \\}, \\?, \\+, \\*, \\ , \\[, \\] 标准字符集合： 能够与’多种字符‘匹配的表达式 注意区分大小写，大写是相反的意思 字符 含义 \\d 任意数字，0~9中的任意一个 \\w 字母或数字或下划线，也就是AZ，az，0~9，_中任意一个 \\s 包括空格，制表符，换行符等空白字符的其中任意一个 . 小数点可以匹配任意一个字符（除了换行符\\n）如果要匹配包括”\\n“在内的所有字符，一般用[\\s\\S] 自定义字符集合 []方括号匹配方式，能够匹配方括号中任意一个字符 方括号内 ^ 是取反的意思 字符 含义 [ab5@] 匹配”a“或”b“或”5“或”@“ [^ abc] 匹配”a“，”b“，”c“之外的任意一个字符 [f-k] 匹配”f”~”k”之间任意一个字母 [^ A-F0-3] 匹配”A”~“F” , “0”~“3”之外的任意一个字符 正则表达式的特殊符号，被包含到中括号中，则失去了特殊意义，除了 ^,- 之外。 标准字符集合，除小数点外，如果被包含于中括号，自定义字符集合将包含该集合。比如： [\\d.\\-+]将匹配：数字、小数点、+、- 量词 修饰匹配次数的特殊符号 符号 含义 {n} 表达式重复n次 {m,n} 表达式至少重复m次，最多重复n次 {m,} 表达式至少重复m次 ? 匹配表达式0次或者1次，相当于{0，1} + 表达式至少出现1次，相当于{1，} * 表达式不出现或出现任意次，相当于{0，} 匹配次数中的贪婪模式（匹配字符越多越好，默认！） 匹配次数中的非贪婪模式（匹配字符越少越好，修饰匹配次数的特殊符号好后再加上一个”？“号） 字符边界 （本组标记匹配的不是字符而是位置，符合条件的位置） 字符 含义 ^ 在字符串开始的地方匹配 $ 在字符串结束的地方匹配 \\b 匹配一个单词边界 \\b匹配这样一个位置：前面的字符和后面的字符不全是\\w 匹配模式 IGNORECASE 忽略大小写模式 匹配时忽略大小写 默认情况下，正则表达式是要区分大小写的。 SINGLEINE 单行模式 整个文本看作一个字符串，只有一个开头，一个结尾。 使小数点”.”可以匹配包括换行符（\\n）在内的任意字符。 MULTILINE 多行模式 每一行都是一个字符串，都有开头和结尾。 在指定了MULTILINE 之后，如果需要仅匹配字符串开始和结束位置，可以使用\\A和\\Z。 选择符和分组 表达式 作用 | 分支结构 左右两边表达式之间”或“关系，匹配左边或右边 （）捕获组 （1），在被修饰匹配次数的时候，括号中的表示式可以作为修饰 （2），取匹配结果的时候，括号中的表达式匹配到的内容可以单独被得到 （3），每一对括号会分配一个编号，使用（）的捕获根据左括号的顺序从1开始自动编号。 （？：Expression）非捕获组 一些表达式中，不得不使用（），但又不需要保存（）中子表达式匹配的内容，这时可以用非捕获组来抵消使用（）带来的副作用。 反向引用（\\nnn） 每一对（）会分配一个编号，使用（）的捕获根据左括号的顺序从1开始自动编号； 通过反向引用，可以对分组已捕获的字符串进行应用； 预搜索（零宽断言） 只进行子表达式的匹配，匹配内容不计入最终匹配结果，是零宽度 这个位置应该符合某个条件。判断当前位置的前后字符，是否符合指定的条件，但不匹配前后的字符。是对位置的匹配。 正则表达式匹配过程中，如果子表达式匹配到的内容是字符内容，而非位置，并被保存到最终的匹配结果中，那么就认为这个表达式是占有字符的；如果子表达式匹配的仅仅是位置，或者匹配的内容并不保存到最终的匹配结果中，那么就认为这个表达式是零宽度的。占有字符还是零宽度，是针对匹配的内容是否保存到最终的匹配结果中而言的。 表达式 含义 (？=exp) 断言自身出现位置的后面能匹配表达式exp (？&lt;=exp) 断言自身出现位置的前面能匹配表达式exp (?!exp) 断言此位置的后面不能匹配表达式exp (?&lt;!exp) 断言此位置的前面不能匹配表达式exp","categories":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://liuazhang.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://liuazhang.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}]},{"title":"3.6）媒体接入与随机接入","slug":"3-6）媒体接入与随机接入","date":"2020-05-13T10:15:29.000Z","updated":"2020-05-16T06:58:10.821Z","comments":true,"path":"2020/05/13/3-6）媒体接入与随机接入/","link":"","permalink":"http://liuazhang.com/2020/05/13/3-6%EF%BC%89%E5%AA%92%E4%BD%93%E6%8E%A5%E5%85%A5%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%8E%A5%E5%85%A5/","excerpt":"3.6.1 媒体介入控制的基本概念 共享信道要着重考虑的一个问题就是如何协调多个发送和接收站点对一个共享传输媒体的占用，即媒体接入控制MAC（Medium Access Control). 静态信道划分 2、链路控制协议LCP （ 用于建立，配置以及测试数据链路的连接","text":"3.6.1 媒体介入控制的基本概念 共享信道要着重考虑的一个问题就是如何协调多个发送和接收站点对一个共享传输媒体的占用，即媒体接入控制MAC（Medium Access Control). 静态信道划分 2、链路控制协议LCP （ 用于建立，配置以及测试数据链路的连接 动态接入控制 受控接入 集中控制 ：（有一个主站以循环方式轮询每个站点有无数据发送，只有被轮询的站点才能发送数据。最大的缺点是存在单点故障问题。 分散控制：（各站点是平等的，并连接成一个环形网络。令牌（一个特殊的控制帧）沿环逐站传递，接收到令牌的站点才有权发送数据 随机接入：(所有站点通过竞争，随机地在信道上发送数据。如果恰巧有两个或更多的站点在同一时刻发送数据，测信号在共享媒体上就要产生碰撞（即发生了冲突）。使得这些站点都发送失败。因此这类协议要解决的关键问题是如何尽量避免冲突及在发生冲突后如何尽快恢复通信。著名的共享式以太网采用的就是随机接入 随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用点对点链路和链路层交换机的交换式局域网在有线领域已完全取代了共享式局域网，但由于无线信道的广播天性，无线局域网无线局域网仍然使用的是共享媒体技术。 3.6.2 静态媒体接入控制——静态信道划分信道复用复用是通信技术中的一个重要概念。复用就是通过一条物理线路同时传输多路用户的信号。 信道复用分为：频分复用FDM，时分复用TDM，波分复用WDM，码分复用CDM。 FDM：频分复用的所用用户同时占用不同的频带资源并行通信。 TDM：时分复用的所有用户在不同的时间占用同样的频带宽度。 WDM：波分复用其实就是光的频分复用。 CDM：码分复用CDM是另一种共享信道的方法。实际上，由于该技术主要用于多址接入，人们更常用的名词是码分多址CDMA。 同理频分复用FDM和时分复用TDM同样可用于多址接入，相应的名词是频分多址FDMA和时分多址TDMA。 CDMA 在CMDA中，每一个比特时间再划分为m个短的间隔，称为码片（Chip），通常m的值是64或128，为了简单起见，在后续的举例中，我们假设m为8； 使用CDMA的每一个站被指派一个唯一的m bit码片序列。 一个站如果要发送比特1，则他发送自己的m bit码片序列； 一个站如果要发送比特0，则发送他自己的m bit码片序列的二进制反码； 码片序列的挑选原则如下： 分配给每个站的码片序列必须各不相同，实际常采用伪随机码序列。 分配给每个站的码片序列必须相互正交（规格化内积为0）。 令向量S表示站S的码片序列，令向量T表示其他任何站的码片序列。 两个不同站S和T的码片序列正交，就是向量S和T的规格化内积为0： 3.6.3随机接入CSMA/CA协议","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"数据链路层","slug":"数据链路层","permalink":"http://liuazhang.com/tags/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"}]},{"title":"3.5）点对点协议PPP","slug":"3-5）点对点协议PPP","date":"2020-05-13T09:45:40.000Z","updated":"2020-05-16T06:35:45.053Z","comments":true,"path":"2020/05/13/3-5）点对点协议PPP/","link":"","permalink":"http://liuazhang.com/2020/05/13/3-5%EF%BC%89%E7%82%B9%E5%AF%B9%E7%82%B9%E5%8D%8F%E8%AE%AEPPP/","excerpt":"点对点协议PPPPPP协议的标准文档[RFC1661,RFC1662]。 PPP协议为在点对点链路传输各种协议数据报提供了一个标准方法，主要由以下三部分构成： 1、对各种协议数据报的封装方法（ 封装成帧） 2、链路控制协议LCP （ 用于建立，配置以及测试数据链路的连接","text":"点对点协议PPPPPP协议的标准文档[RFC1661,RFC1662]。 PPP协议为在点对点链路传输各种协议数据报提供了一个标准方法，主要由以下三部分构成： 1、对各种协议数据报的封装方法（ 封装成帧） 2、链路控制协议LCP （ 用于建立，配置以及测试数据链路的连接 3、一套网络控制协议NCPs （ 其中的每一个协议支持不同的网络层协议 PPP帧的透明传输 1、面向字节的异步链路使用字节填充法（插入转义字符 2、面向比特的同步链路使用比特填充法（零比特填充 PPP协议的工作状态","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"数据链路层","slug":"数据链路层","permalink":"http://liuazhang.com/tags/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"}]},{"title":"文件上传","slug":"文件上传","date":"2020-05-13T01:20:45.000Z","updated":"2020-05-17T12:11:10.446Z","comments":true,"path":"2020/05/13/文件上传/","link":"","permalink":"http://liuazhang.com/2020/05/13/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/","excerpt":"","text":"","categories":[{"name":"java","slug":"java","permalink":"http://liuazhang.com/categories/java/"}],"tags":[{"name":"网络编程","slug":"网络编程","permalink":"http://liuazhang.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}]},{"title":"网络编程","slug":"网络编程","date":"2020-05-12T08:30:22.000Z","updated":"2020-05-17T12:11:08.559Z","comments":true,"path":"2020/05/12/网络编程/","link":"","permalink":"http://liuazhang.com/2020/05/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/","excerpt":"1、UDP编程 1.1、UdpClient:","text":"1、UDP编程 1.1、UdpClient: 12345678910111213141516171819202122232425262728293031323334package UDP编程;import java.net.DatagramPacket;import java.net.DatagramSocket;import java.net.InetSocketAddress;/* * 发送端 * * 1、使用DatagramSocket 指定端口 创建发送端端 * 2、准备数据 一定转成字节数组 * 3、封装成DatagramPacket包裹 ，需要制定目的地 * 4、发送包裹send（DatagramPacket p） * 5、释放资源 */public class UdpClient &#123; public static void main(String[] args) throws Exception &#123; System.out.println(\"发送方启动中。。。\"); // 1、使用DatagramSocket 指定端口 创建发送端端 DatagramSocket client = new DatagramSocket(8888); // 2、准备数据 一定转成字节数组 String data = \"老刘很嚣张\"; byte[] datas = data.getBytes(); // 3、封装成DatagramPacket包裹 ，需要制定目的地 DatagramPacket packet = new DatagramPacket(datas, 0, datas.length, new InetSocketAddress(\"localhost\", 9999)); // 4、发送包裹send（DatagramPacket p） client.send(packet); // 5、释放资源 client.close(); &#125;&#125; 1.2、UdpServer123456789101112131415161718192021222324252627282930313233343536373839package UDP编程;import java.net.DatagramPacket;import java.net.DatagramSocket;/* * 接收端 * * 1、使用DatagramSocket 指定端口 创建接收端 * 2、准备容器 封装成DatagramPacket包裹 * 3、阻塞式接受包裹receive（DatagramPacket p） * 4、分析数据 * byte[] getData() * getLength() * 5、释放资源 */public class UdpServer &#123; public static void main(String[] args) throws Exception &#123; System.out.println(\"接收方启动中。。。\"); //1、使用DatagramSocket 指定端口 创建接收端 DatagramSocket server = new DatagramSocket(9999); //2、准备容器 封装成DatagramPacket包裹 byte[] container = new byte[1024*64]; DatagramPacket packet = new DatagramPacket(container,0,container.length); //3、阻塞式接受包裹receive（DatagramPacket p） server.receive(packet); //阻塞式，会有延迟 //4、分析数据 // byte[] getData() // getLength() byte[] datas = packet.getData(); int len = packet.getLength(); System.out.println(new String(datas,0,len)); //5、释放资源 server.close(); &#125;&#125; 2、TCP编程 2.1、TcpClient1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package TCP编程;import java.io.InputStream;import java.io.OutputStream;import java.net.Socket;/** * -TCp通信的客户端：向服务器发送连接请求，给服务器发送数据，读取服务器回写的数据。 * -表示客户端的类： * ----java.net.Socket：此类实现客户端套接字（也可以就叫“套接字”）。套接字是两台计算机间通信的端点。 * ----套接字：包含了IP地址和端口号的网络单位。 * * -构造方法： * ----Socket(String host, int port) 创建一个流套接字并将其连接到指定主机上的指定端口号。 * ----参数： * -------String host:服务器主机的名称/服务器的ip地址。 * -------int port：服务器的端口号。 * * -成员方法： * ----OutputStream getOutputStream() 返回此套接字的输出流。 * ----InputStream getInputStream() 返回此套接字的输入流。 * ----close()关闭此套接字。 * * -实现步骤： * ----1、创建一个客户端对象Socket，构造方法绑定服务器的IP地址和端口号。 * ----2、使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。 * ----3、使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据。 * ----4、使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象。 * ----5、使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据。 * ----6、释放资源（Socket) * * -注意事项： * ----1、客户端和服务器端进行交互，必须使用Socket中提供的网络流，不能使用自己创建的流对象。 * ----2、当我们创建客户端对象Socket的时候，就会去请求服务器和服务器经过三次握手建立连接通路 * ---如果这时服务器没有启动，那么就会抛出异常 * ---如果这时服务器已经启动，那么就可以进行交互了 * */public class TcpClient &#123; public static void main(String[] args) throws Exception &#123; //1、创建一个客户端对象Socket，构造方法绑定服务器的IP地址和端口号。 Socket socket = new Socket(\"localhost\", 8888); //2、使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。 OutputStream os = socket.getOutputStream(); //3、使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据。 os.write(\"客户端：天下风云出我辈，一入江湖岁月催\".getBytes()); //4、使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象。 InputStream is = socket.getInputStream(); //5、使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据。 byte[] bytes = new byte[1024]; int len = is.read(bytes); System.out.println(new String(bytes,0,len)); //6、释放资源（Socket) socket.close(); &#125;&#125; 2.2、TcpServer12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package TCP编程;import java.io.InputStream;import java.io.OutputStream;import java.net.ServerSocket;import java.net.Socket;/** * -TCp通信的服务器端：接收客户端的请求，读取客户端发送的数据，给客户端回写数据。 * -表示服务器的类： * ----java.net.ServerSocket：这个类实现了服务器套接字。 * ----套接字：包含了IP地址和端口号的网络单位。 * * -构造方法： * ----ServerSocket(int port) 创建一个服务器套接字，绑定到指定的端口。 * ----参数： * -------int port：端口号。 * * -服务器端必须明确一件事情，必须的知道是哪一个客户端请求的服务器 所以可以使用accept方法获取到请求的客户端对象Socket。 * * -成员方法： * ----Socket accept() 监听要对这个套接字作出的连接并接受它。 * ----close()关闭此套接字。 * * -实现步骤： * ----1、创建一个服务器端ServerSocket对象和系统要指定的端口号。 * ----2、使用ServerSocket对象中的方法accept获取到请求客户端的Socket对象。 * ----3、使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象。 * ----4、使用网络字节输入流InputStream对象中的方法read，读取客户端发送的数据。 * ----5、使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。 * ----6、使用网络字节输出流OutputStream对象中的方法write，给客户端回写数据。 * ----7、释放资源（Socket，ServerSocket) * */public class TcpServer &#123; public static void main(String[] args) throws Exception &#123; //1、创建一个服务器端ServerSocket对象和系统要指定的端口号。 ServerSocket server = new ServerSocket(8888); //2、使用ServerSocket对象中的方法accept获取到请求客户端的Socket对象。 Socket socket = server.accept(); //3、使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象。 InputStream is = socket.getInputStream(); //4、使用网络字节输入流InputStream对象中的方法read，读取客户端发送的数据。 byte[] bytes = new byte[1024]; int len = is.read(bytes); System.out.println(new String(bytes,0,len)); //5、使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。 OutputStream os = socket.getOutputStream(); //6、使用网络字节输出流OutputStream对象中的方法write，给客户端回写数据。 os.write(\"服务器：皇图霸业谈笑中，不胜人生一场醉\".getBytes()); //7、释放资源（Socket，ServerSocket) socket.close(); server.close(); &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://liuazhang.com/categories/java/"}],"tags":[{"name":"网络编程","slug":"网络编程","permalink":"http://liuazhang.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}]},{"title":"3.4）可靠传输","slug":"3-4）可靠传输","date":"2020-05-09T05:45:00.000Z","updated":"2020-05-16T06:35:37.946Z","comments":true,"path":"2020/05/09/3-4）可靠传输/","link":"","permalink":"http://liuazhang.com/2020/05/09/3-4%EF%BC%89%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/","excerpt":"1、可靠传输的基本概念&emsp;使用差错检测技术（例如循环冗余校验CRC），接收方的数据链路层就可检测出帧在传输过程中是否产生了误码（比特错误）。 &emsp;数据链路层向上层提供的服务类型 &emsp;&emsp;不可靠传输服务：仅仅丢弃有误码的帧，其他什么也不做； &emsp;&emsp;可靠传输服务：想办法实现发送端发送什么，接收端就收到什么 &emsp;一般情况下，有线链路的误码率较低，为了减小开销，并不要求数据链路层向上提供可靠传输服务。即使出现了误码，可靠传输的问题由其上层处理。 &emsp;无线链路易受干扰，误码率较高，因此要求数据链路层必须向上层提供可靠传输服务。 &emsp;比特差错只是传输差错的一种。","text":"1、可靠传输的基本概念&emsp;使用差错检测技术（例如循环冗余校验CRC），接收方的数据链路层就可检测出帧在传输过程中是否产生了误码（比特错误）。 &emsp;数据链路层向上层提供的服务类型 &emsp;&emsp;不可靠传输服务：仅仅丢弃有误码的帧，其他什么也不做； &emsp;&emsp;可靠传输服务：想办法实现发送端发送什么，接收端就收到什么 &emsp;一般情况下，有线链路的误码率较低，为了减小开销，并不要求数据链路层向上提供可靠传输服务。即使出现了误码，可靠传输的问题由其上层处理。 &emsp;无线链路易受干扰，误码率较高，因此要求数据链路层必须向上层提供可靠传输服务。 &emsp;比特差错只是传输差错的一种。 &emsp;整个计算机网络体系结构来看，传输差错还包含分组丢失，分组失序以及分组重复。 &emsp;分组丢失，分组失序以及分组重复这些传输差错，一般不会出现在数据链路层，而会出现在其上层。 &emsp;可靠传输服务并不仅局限于数据链路层，其他各层均可实现可靠传输。 &emsp;可靠传输的实现比较复杂，开销也比较大，是否使用可靠传输取决于应用需求。 2、可靠传输的实现机制三种实现机制：停止-等待协议、回退N帧协议、选择重传协议。 这三种可靠传输实现机制的基本原理并不仅限于数据链路层，可以应用到计算机网络体系结构的各层协议中。 2.1、停止-等待协议SW（Stop-and-Wait） 发送方发送数据data 接收方若没有发现误码，接受该数据分组，并回复ACK（确认分组 发送方发送下一个数据 发送方发送数据data 接收方若发现误码，丢弃该数据分组，并回复NAK（否认分组 重新发送data 所以发送方每发送一个数据分组后，并不会将该数据分组立刻删除，只有收到针对该数据分组的确认分组后，才能将其从缓存中删除 //超时计时器，若发送方长时间得不到接收方响应，则重传原来的数据分组，这就叫做超时重传。 //如果接受方所回应的AC丢失，则会触发超时重传，这时就会发生分组重复为了避免这种情况，可以给每个分组带上序号，通过序号，接收方可以识别分组是否重复，若发现重复，接收方丢弃重复分组，并回应ACK，（ 因为只要保证此次与上次分组不同，所以用一比特来编号就可以了。 //若ACK迟到，则会产生重复确认，同理也要为确认分组进行编号 接收端检测到数据分组有误时,将其丢弃并等待发送方的超时重传。但对于误码率较高的点对点链路，为使发 送方尽早重传，也可给发送方发送NAK分组。 为了让接收方能够判断所收到的数据分组是否是重复的，需要给数据分组编号。由于停止-等待协议的停等特性，只需1个比特就够了，即编号0和1。 为了让发送方能够判断所收到的ACK是否是重复的，需要给ACK分组编号，所用比特数量与分组编号所用数量一样。数据链路层一般不会出现ACK分组迟到的情况，因此在数据链路层实现停止-等待协议可以不用给ACK分组编号。 超时计时器设置的重传时间应仔细选择。一般可将重传时间选为略大于“从发送方到接收方的平均往返时间”。 数据链路层点对点的往返时间比较确定，重传时间比较好设定。 然而在运输层，由于端到端往返时间非常不确定，设置合适的重传时间有时并不容易。 停止-等待协议的信道利用率 TD：发送方发送数据分组所消耗的发送时延。 RTT：收发双方之间的往返时间。 TA：接收方发送确认分组所消耗的发送时延。 TA一般都远小于TD，可以忽略。 &emsp;当往返时延RTT远大于数据帧发送时延TD时（例如使用卫星链路），信道利用率非常低。 &emsp;若出现重传，则对于传送有用的数据信息来说，信道利用率还要降低。 &emsp;为了克服停止-等待协议信道利用率很低的缺点，就产生了另外两种协议，即后退N帧协议GBN和选择重传协议SR 2.2、回退N帧协议GBN（Go-Back-N） 回退N帧协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种ARQ协议； 在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议； 由于回退N帧协议的特性，当通信线路质量不好时，其信道利用率并不比停止-等待协议高； 发送方：&emsp;发送窗口尺寸WT的取值范围是1 &lt; WT &lt;= 2^n-1其中，n是构成分组序号的比特数量。 &emsp;&emsp;WT = 1 ——》停止等待协议； &emsp;&emsp;WT &gt;= 2^n-1 ——》接收方无法分辨新，旧数据分组； &emsp;发送方可在未收到接收方确认分组的情况下，将序号落在发送窗口内的多个数据分组全部发送出去。 &emsp;发送方只有收到对已发送的数据分组的确认时，发送窗口才能向前相应滑动。 &emsp;发送方收到多个重复确认时，可在重传计时器超时前尽早开始重传，由具体实现决定。 &emsp;发送方发送窗口内某个已发送的数据分组产生超时重发时，其后续在发送窗口内且已发送的数据分组也必须全部重传，这就是回退N帧协议名称的由来。 接收方：&emsp;接收方的接收窗口尺寸WR的取值范围是WR = 1因此接收方只能按序接收数据分组。 &emsp;接收方只接收序号落在接收窗口内且无误码的数据分组，并且将接收窗口向前滑动一个位置，与此同时给发送方发回相应的确认分组。为了减少开销，接收方不一定每收到一个按序到达且无误码的数据分组就给发送方发回一个确认分组， &emsp;&emsp;而是可以在连续收到好几个按序到达且无误码的数据分组后（由具体实现决定），才针对最后一个数据分组发送确认分组，这称为累积确认； &emsp;&emsp;或者可以在自己有数据分组要发送时才对之前按序接受且无误码的数据分组进行捎带确认； &emsp;接收方收到未按序到达的数据分组，除丢弃外，还要对最近按序接收的数据分组进行确认； 例题： 2.3、选择重传协议发送方：&emsp;发送窗口尺寸WT的取值范围是1 &lt; WT &lt;= 2^(n-1)其中，n是构成分组序号的比特数量。 &emsp;&emsp;WT = 1 ——》停止等待协议； &emsp;&emsp;WT &gt;= 2^(n-1) ——》接收方无法分辨新，旧数据分组； &emsp;发送方可在未收到接收方确认分组的情况下，将序号落在发送窗口内的多个数据分组全部发送出去。 &emsp;发送方只有按序收到对已发送的数据分组的确认时，发送窗口才能向前相应滑动；若收到未按序到达的确认分组时，对其进行记录，以防止其相应数据分组的超时重发，但发送窗口不能向前滑动。 接收方：&emsp;接收方的接收窗口尺寸WR的取值范围是1&lt; WR &lt;= WT因此接收方只能按序接收数据分组。 &emsp;WR = 1 ——》回退N帧协议 &emsp;WR = WT ——》无意义 &emsp;接收方可接收未按序到达但没有误码并且序号落在接收窗口内的数据分组； &emsp;为了使发送方仅重传出现差错的分组，接收方不能在采用累计确认，而需要对每个正确接收到的数据分组进行逐一确认； &emsp;接收方只有在按序接收数据分组后，接收窗口才能向前滑动。 例题：","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"数据链路层","slug":"数据链路层","permalink":"http://liuazhang.com/tags/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"}]},{"title":"3.3）差错检测","slug":"3-3）差错检测","date":"2020-05-08T06:10:24.000Z","updated":"2020-05-16T06:35:31.962Z","comments":true,"path":"2020/05/08/3-3）差错检测/","link":"","permalink":"http://liuazhang.com/2020/05/08/3-3%EF%BC%89%E5%B7%AE%E9%94%99%E6%A3%80%E6%B5%8B/","excerpt":"差错检测1、实际的通信链路都不是理想的，比特在传输过程中可能会产生差错：1可能会变成0，而0可能会变成1.这称为比特差错 2、在一段时间内，传输错误的比特占所传输比特总数的比特率称为误码率BER（Bit Error Rate）。 3、使用差错检测码来检测数据在传输过程中是否产生了比特差错，使数据链路层所要解决的重要问题之一。 奇偶校验","text":"差错检测1、实际的通信链路都不是理想的，比特在传输过程中可能会产生差错：1可能会变成0，而0可能会变成1.这称为比特差错 2、在一段时间内，传输错误的比特占所传输比特总数的比特率称为误码率BER（Bit Error Rate）。 3、使用差错检测码来检测数据在传输过程中是否产生了比特差错，使数据链路层所要解决的重要问题之一。 奇偶校验 &emsp;在代发送的数据后面添加1位奇偶校验位，使整个数据（包括所添加的校验位在内）中“1”的个数为奇数（奇校验）或偶数（偶校验）。 1位误码可以检测出错误，无法应对2位误码 循环冗余校验CRC（Cyclic Redundancy Check） &emsp;收发双方约定好一个生成多项式G（x）； &emsp;发送方基于待发送的数据和生成多项式计算出差错检测码（冗余码），将其添加到待传输数据的后面一起传输； &emsp;接收方通过生成多项式来计算收到的数据是否产生了误码； 例题 补充 1、检错码只能检测出帧在传输过程中出现了差错，但并不能定位错误，因此无法纠正错误。 2、要想纠正传输中的差错，可以使用冗余信息更多的纠错码进行前向纠错。但纠错码的开销较大，在计算机网络中较少使用。 3、循环冗余校验CRC有很好的检错能力（漏检率非常低），虽然计算比较复杂，但非常易于用硬件实施，因此被广泛用于数据链路层。 4、在计算机网络中通常采用检错重传方式来纠正传输中的差错，或者仅仅是丢弃检测到差错的帧，这取决于数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"数据链路层","slug":"数据链路层","permalink":"http://liuazhang.com/tags/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"}]},{"title":"3.2）封装成帧","slug":"3-2）封装成帧","date":"2020-05-08T03:27:47.000Z","updated":"2020-05-16T06:35:26.019Z","comments":true,"path":"2020/05/08/3-2）封装成帧/","link":"","permalink":"http://liuazhang.com/2020/05/08/3-2%EF%BC%89%E5%B0%81%E8%A3%85%E6%88%90%E5%B8%A7/","excerpt":"封装成帧 封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧。 帧头和帧尾中包含有重要的控制信息。 帧头和帧尾的作用之一就是帧定界。 透明传输是指数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样。","text":"封装成帧 封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧。 帧头和帧尾中包含有重要的控制信息。 帧头和帧尾的作用之一就是帧定界。 透明传输是指数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样。 面向字节的物理链路使用字节填充（或称字符填充）的方法实现透明传输。 面向比特的物理链路使用比特填充的方法实现透明传输。 为了提高帧的传输效率，应当使帧的数据部分的长度尽可能大些。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"数据链路层","slug":"数据链路层","permalink":"http://liuazhang.com/tags/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"}]},{"title":"3.1）数据链路层概述","slug":"3-1）数据链路层概述","date":"2020-05-07T03:38:24.000Z","updated":"2020-05-16T06:35:23.743Z","comments":true,"path":"2020/05/07/3-1）数据链路层概述/","link":"","permalink":"http://liuazhang.com/2020/05/07/3-1%EF%BC%89%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E6%A6%82%E8%BF%B0/","excerpt":"数据链路层概述 链路（Link）就是从一个结点到相邻结点的一段物理线路，而中间没有任何其他的交换结点。 数据链路（Data Link）是指把实现通信协议的硬件和软件加到链路上，就构成了数据链路。 数据链路以帧为单位传输和处理数据。","text":"数据链路层概述 链路（Link）就是从一个结点到相邻结点的一段物理线路，而中间没有任何其他的交换结点。 数据链路（Data Link）是指把实现通信协议的硬件和软件加到链路上，就构成了数据链路。 数据链路以帧为单位传输和处理数据。 使用点对点信道的数据链路层 三个重要问题 封装成帧 差错检测 可靠传输 使用广播信道的数据链路层 共享式以太网的媒体接入控制协议CSMA/CD 802.11局域网的媒体接入控制协议CSMA/CA 数据链路层的互联设备 网桥，交换机的工作原理 集线器（物理层互联设备）与交换机的区别","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"数据链路层","slug":"数据链路层","permalink":"http://liuazhang.com/tags/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"}]},{"title":"2.5）信道极限容量","slug":"2-5）信道的极限容量","date":"2020-05-07T01:38:24.000Z","updated":"2020-05-16T06:40:47.440Z","comments":true,"path":"2020/05/07/2-5）信道的极限容量/","link":"","permalink":"http://liuazhang.com/2020/05/07/2-5%EF%BC%89%E4%BF%A1%E9%81%93%E7%9A%84%E6%9E%81%E9%99%90%E5%AE%B9%E9%87%8F/","excerpt":"信道极限容量1、造成信号失真的因素： 码元传输速率 信号传输距离 噪声干扰","text":"信道极限容量1、造成信号失真的因素： 码元传输速率 信号传输距离 噪声干扰 传输媒体质量 2、码元传输速率又叫波特率、调制速率、波形速率或符号速率。 3、当1个码元只携带1比特信息时，波特率（码元/秒）与比特率（比特/秒）在数值上是相等的。 4、当1个码元携带n比特信息量时，则波特率转化成比特率时，数值要乘以n。 5、 &nbsp;&nbsp;&nbsp;&nbsp;c是信道的极限传输速率，单位为b/s； &nbsp;&nbsp;&nbsp;&nbsp;W为信道带宽，单位为Hz； &nbsp;&nbsp;&nbsp;&nbsp;s是信道内所传输信号的平均功率； &nbsp;&nbsp;&nbsp;&nbsp;N是信道内的高斯噪声功率； &nbsp;&nbsp;&nbsp;&nbsp;S/N是信噪比，使用分贝（dB）作为度量单位 &nbsp;&nbsp;&nbsp;&nbsp;信噪比（dB）=（dB）","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"物理层","slug":"物理层","permalink":"http://liuazhang.com/tags/%E7%89%A9%E7%90%86%E5%B1%82/"}]},{"title":"2.4）编码与调制","slug":"2-4）编码与调制","date":"2020-05-07T01:11:44.000Z","updated":"2020-05-16T06:40:41.182Z","comments":true,"path":"2020/05/07/2-4）编码与调制/","link":"","permalink":"http://liuazhang.com/2020/05/07/2-4%EF%BC%89%E7%BC%96%E7%A0%81%E4%B8%8E%E8%B0%83%E5%88%B6/","excerpt":"编码与调制编码 消息 数据，运送消息的实体 信号，数据的电磁表现","text":"编码与调制编码 消息 数据，运送消息的实体 信号，数据的电磁表现 基带信号，基带发出的原始电信号 数字基带信号， –编码–》数字信道 以太网（曼彻斯特编码，4B/5B，8B/10B ————————-调制–》模拟信道 WiFi （CCK/DSSS/OFDM调制 模拟基带信号， –编码–》数字信道 对音频信号进行编码的脉码调制PCM ————————-调制–》模拟信道 语音数据加载到模拟的载波信号中传输。 ​ 频分复用FDM技术，充分利用带宽资源》。 码元，在使用时间域的波形表示数字型号时，代表不同离散数值的基本波形。 常用编码 不归零编码（存在同步问题） 归零编码，每个码元传输结束后信号都要“归零”，所以接受双方只要在信号归零后进行采样即可，不需要单独的时钟信号。 但是，归零编码中大部分的数据带宽，都用来传输“归零”而浪费掉了。 曼彻斯特编码 差分曼彻斯特编码 调制 基本调制，调幅（AM）、调频（FM）、调相（PM） 使用基本调制方法，一个码元只能包含一个比特信息 混合调频 因为频率和相位是相关的，即频率是相位随时间的变化率。所以一次只能调制频率和相位两个中的一个。 通常情况下，相位和振幅可以结合起来一起调制，称为正交振幅调制QAM。 QAM-16 12种相位 （码元和圆心的连线与横坐标的夹角可看作是相位 每种相位有1或2种振幅可选 （码元与圆心连线的距离可看作是振幅 可以调制出16种码元（波形），每种码元可以对应表示4个比特 码元与4个比特的对应关系采用格雷码（任意两个相邻码元只有一个比特不同","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"物理层","slug":"物理层","permalink":"http://liuazhang.com/tags/%E7%89%A9%E7%90%86%E5%B1%82/"}]},{"title":"1.6.4）计算机网络体系结构中的专用术语","slug":"1-6-4）计算机网络体系结构中的专用术语","date":"2020-05-07T01:11:17.000Z","updated":"2020-05-16T06:41:13.446Z","comments":true,"path":"2020/05/07/1-6-4）计算机网络体系结构中的专用术语/","link":"","permalink":"http://liuazhang.com/2020/05/07/1-6-4%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%AD%E7%9A%84%E4%B8%93%E7%94%A8%E6%9C%AF%E8%AF%AD/","excerpt":"计算机网络体系结构中的专用术语 实体 ： 任何可发送或接收信息的硬件或软件进程。 对等实体： 收发双方相同层次中的实体。","text":"计算机网络体系结构中的专用术语 实体 ： 任何可发送或接收信息的硬件或软件进程。 对等实体： 收发双方相同层次中的实体。 协议 ： 控制两个对等实体进行逻辑通信的规则的集合。 协议的三要素 ： 语法 语义 同步 语法 定义所交换信息的格式 语义 定义收发双方所要完成的操作 同步 定义收发双方的时序关系 服务 在协议的控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务。 要实现本层协议，还需要使用下面一层所提供的服务。 协议是“水平的”，服务是“垂直的”。 实体看得见相邻下层所提供的服务，并不知道实现该服务的具体协议。也就是说下面的协议对上面的实体是“透明”的。 服务访问点 ： 在同一系统中相邻两层的实体交换信息的逻辑接口，用于区分不同的服务类型。 数据链路层的服务访问点为帧的“类型”字段。 网络层的服务访问点为IP数据报首部中的“协议字段”。 运输层的服务访问点为“端口号”。 服务原语 ： 上层使用下层所提供的服务必须通过与下层交换一些命令，这些命令称为服务原语。 协议数据单元PDU ： 对等层次之间传送的数据包称为该层的协议数据单元。 应用层： 报文（message） 运输层： TCP报文段（segment）或UDP用户数据报（datagram） 网络层： IP数据报或分组（packet） 链路层： 帧（frame） 物理层： 比特流（bit stream） 服务数据单元SDU ： 同一系统内，层与层之间交换的数据包成为服务数据单元。 多个SDU可以合成为一个PDU；一个SDU也可划分为几个PDU。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"概述","slug":"概述","permalink":"http://liuazhang.com/tags/%E6%A6%82%E8%BF%B0/"}]},{"title":"1.6.3）计算机网络体系结构分层思想举例","slug":"1-6-3）计算机网络体系结构分层思想举例","date":"2020-05-07T01:10:51.000Z","updated":"2020-05-16T06:41:07.185Z","comments":true,"path":"2020/05/07/1-6-3）计算机网络体系结构分层思想举例/","link":"","permalink":"http://liuazhang.com/2020/05/07/1-6-3%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%88%86%E5%B1%82%E6%80%9D%E6%83%B3%E4%B8%BE%E4%BE%8B/","excerpt":"计算机网络体系结构分层思想举例应用层 ——》 HTTP报文 运输层 ——》 HTTP TCP （添加TCP首部","text":"计算机网络体系结构分层思想举例应用层 ——》 HTTP报文 运输层 ——》 HTTP TCP （添加TCP首部 网络层 ——》 HTTP TCP IP （添加IP首部 数据链路层 ——》 ETH HTTP TCP IP ETH （添加首部和尾部，使之成为帧 物理层 ——》 将帧看作比特流，并添加前导码 物理层将添加有前导码的比特流变换成相应的信号发送到传输媒体，信号通过传输媒体到达路由器","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"概述","slug":"概述","permalink":"http://liuazhang.com/tags/%E6%A6%82%E8%BF%B0/"}]},{"title":"1.6.2）计算机网络体系结构分层的必要性","slug":"1-6-2）计算机网络体系结构分层的必要性","date":"2020-05-07T01:10:13.000Z","updated":"2020-05-16T06:41:00.742Z","comments":true,"path":"2020/05/07/1-6-2）计算机网络体系结构分层的必要性/","link":"","permalink":"http://liuazhang.com/2020/05/07/1-6-2%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%88%86%E5%B1%82%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/","excerpt":"计算机网络体系结构分层的必要性实现计算机网络所要解决的各种主要问题：原理体系结构 5、应用层 : 通过应用进程间的交互来完成特定的网络应用","text":"计算机网络体系结构分层的必要性实现计算机网络所要解决的各种主要问题：原理体系结构 5、应用层 : 通过应用进程间的交互来完成特定的网络应用 （支持万维网应用的HTTP协议 ​ 支持电子邮件的SMTP协议 ​ 支持文件传输的FTP协议 ，，，） 4、运输层（进程之间基于网络的通信）: 如何解决进程之间基于网络的通信问题 出现传输错误时如何处理 ，，， 3、网络层（分组在多个网络间（路由）进行传输）: 如何标识各网络以及网络中各主机（网络和主机共同编址的问题，例如IP地址） 路由器如何转发分组，如何进行路由选择 ，，， 2、数据链路层（分组在一个网络上传输）: 如何表示网络中的各主机（主机编址问题，例如MAC地址） 如何从信号所表示的一连串比特流中区分出地址和数据 如何协调各主机征用总线 ，，， 1、物理层 : 采用怎样的传输媒体（介质） 采用怎样的物理接口 使用怎样的信号表示比特0和1 ，，，","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"概述","slug":"概述","permalink":"http://liuazhang.com/tags/%E6%A6%82%E8%BF%B0/"}]},{"title":"1.6.1）常见的计算机网络体系结构","slug":"1-6-1）常见的计算机网络体系结构","date":"2020-05-07T01:09:34.000Z","updated":"2020-05-16T06:40:55.146Z","comments":true,"path":"2020/05/07/1-6-1）常见的计算机网络体系结构/","link":"","permalink":"http://liuazhang.com/2020/05/07/1-6-1%EF%BC%89%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/","excerpt":"常见的计算机网络体系结构1.1 OSI体系结构​ 7，应用层","text":"常见的计算机网络体系结构1.1 OSI体系结构​ 7，应用层 ​ 6，表示层 ​ 5，会话层 ​ 4，运输层 ​ 3，网络层 ​ 2，数据链路层 ​ 1，物理层 1.2 TCP/IP体系结构​ 4，应用层 【HTTP SMTP】 【DNS RTP】 ​ 3，运输层 TCP（可靠传输） UDP（不可靠传输） ​ 2，网际层 IP ​ 1，网络接口层 网络接口 ​ （路由器只包含网际层、网络接口层） 1.3原理体系结构​ 5，应用层 ​ 4，运输层 ​ 3，网络层 ​ 2，数据链路层 ​ 1，物理层","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"概述","slug":"概述","permalink":"http://liuazhang.com/tags/%E6%A6%82%E8%BF%B0/"}]},{"title":"hexo发布博客并部署到远端","slug":"hexo发布博客并部署到远端","date":"2020-04-21T03:31:56.000Z","updated":"2020-04-21T04:32:14.841Z","comments":true,"path":"2020/04/21/hexo发布博客并部署到远端/","link":"","permalink":"http://liuazhang.com/2020/04/21/hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E8%BF%9C%E7%AB%AF/","excerpt":"发布博客到博客根目录下打开git 1、清除缓存 hexo clean 2、新建博客 hexo new post_name 在source/_posts中会生成文章post_name.md","text":"发布博客到博客根目录下打开git 1、清除缓存 hexo clean 2、新建博客 hexo new post_name 在source/_posts中会生成文章post_name.md 3、编写 ​ .md文件使用的是markdown，建议使用编译器 Typora ，对于markdown的学习 菜鸟教程 4、保存之后 hexo g hexo s 部署到远端1、配置Git的用户信息： git config –global user.name “GitHub用户名” git config –global user.email “GitHub邮箱” 2、生成ssh密钥文件 ssh-keygen -t rsa -C “Github邮箱” 密钥文件会自动保存到 C:\\Users\\Administrator\\.ssh 前往github创建个人仓库，仓库名字必须为：username.github.io 将刚新生成的公钥id_rsa.pub添加到Github中，完了以后使用命令ssh git@github.com测试 3、准备部署 在正式部署之前，需要安装hexo的部署插件： cnpm install hexo-deployer-git –save 修改配置文件_config.yml，在deploy下指定仓库路径和部署的协议，具体配置如下： deploy: repository: 刚才创建的github仓库的git地址 type: git branch: master 重新编译：hexo g 然后部署：hexo d 成功后就可以登录github的项目路径查看到该网站 https://github用户名.github.io","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://liuazhang.com/tags/hexo/"}]},{"title":"哈哈哈嗝哈","slug":"随笔","date":"2020-04-20T06:05:21.000Z","updated":"2020-05-15T03:16:20.776Z","comments":true,"path":"2020/04/20/随笔/","link":"","permalink":"http://liuazhang.com/2020/04/20/%E9%9A%8F%E7%AC%94/","excerpt":"英语四六级考试，我跟宿管大爷打招呼，宿管大爷很开心祝我考100分 孩子问妈妈：“为什么蜡烛火苗一窜一窜的” 妈妈说：“因为这是精神小火 ” “丢死人了!”王老汉-一边喊着一边把尸体扔下了楼。 王老汉愤怒地打开水龙头，因为开水龙头烫着他了。 出门打架如果派出所有人，那就不需要派出所有人。","text":"英语四六级考试，我跟宿管大爷打招呼，宿管大爷很开心祝我考100分 孩子问妈妈：“为什么蜡烛火苗一窜一窜的” 妈妈说：“因为这是精神小火 ” “丢死人了!”王老汉-一边喊着一边把尸体扔下了楼。 王老汉愤怒地打开水龙头，因为开水龙头烫着他了。 出门打架如果派出所有人，那就不需要派出所有人。 一群伟大的科学家死后在天堂里玩藏猫猫，轮到爱因斯坦抓人，他数到100睁开眼睛，看到所有人都藏起来了，只有牛顿还站在那里。 爱因斯坦走过去说：“牛顿，我抓住你了。” 牛顿：“不，你没有抓到牛顿。” 爱因斯坦：“你不是牛顿你是谁？” 牛顿：“你看我脚下是什么？” 爱因斯坦低头看到牛顿站在一块长宽都是一米的正方形的地板砖上，不解。 牛顿：“我脚下这是一平方米的方块，我站在上面就是牛顿/平方米，所以你抓住的不是牛顿，你抓住的是帕斯卡。”","categories":[{"name":"生活","slug":"生活","permalink":"http://liuazhang.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://liuazhang.com/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"说一说我在安装hexo过程中踩到的坑","slug":"说一说我在安装hexo过程中踩到的坑","date":"2020-04-20T03:56:56.000Z","updated":"2020-05-09T13:01:15.051Z","comments":true,"path":"2020/04/20/说一说我在安装hexo过程中踩到的坑/","link":"","permalink":"http://liuazhang.com/2020/04/20/%E8%AF%B4%E4%B8%80%E8%AF%B4%E6%88%91%E5%9C%A8%E5%AE%89%E8%A3%85hexo%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E5%88%B0%E7%9A%84%E5%9D%91/","excerpt":"第一次部署hexo，可以说把所有能踩的坑踩个遍，下面说说： 安装node和git这俩不必细说，一路向下就OK了 便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用而且找不到hexo。 而git的使用方法，右键 –》Git Bash Here。","text":"第一次部署hexo，可以说把所有能踩的坑踩个遍，下面说说： 安装node和git这俩不必细说，一路向下就OK了 便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用而且找不到hexo。 而git的使用方法，右键 –》Git Bash Here。 安装Hexo安装淘宝镜像cnpm 1npm install -g cnpm --registry=https://registry.npm.taobao.org 安装hexo 1cnpm install -g hexo-cli 安装hexo之后 1hexo -v 查看是否安装成功，如果不成功的话，别着急配置，一下环境变量，在系统变量path下添加路径即可正常使用hexo。 C:\\MYBLOG\\NodeJs\\node_global\\node_modules\\hexo-cli\\bin 这是我的变量路径，大家参考一下。 另外这里也狠狠的坑了我一把，因为之前看到有教程说可以不用git，所以我一直都用自己的cmd，然而，到这一步时发现 ‘hexo’ 不是内部或外部命令，也不是可运行的程序或批处理文件。 直到我打开了git，，， 所以在这之后一定要用git 创建及运行博客新建一个空文件夹，作为博客根目录，在该根目录下，初始化博客 ，这里要注意，这个文件夹很重要。 在该根目录下，右键进入git 1234hexo initcnpm installhexo ghexo s 编译博客系统：hexo g 启动本地服务器进行预览：hexo s 如果hexo正常工作了，输入http://localhost:4000/就能看到博客的初始模样 另外常用的hexo命令有： 部署：hexo d 清除缓存：hexo clean 升级hexo：npm update hexo -g","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://liuazhang.com/tags/hexo/"}]}],"categories":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://liuazhang.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://liuazhang.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"java","slug":"java","permalink":"http://liuazhang.com/categories/java/"},{"name":"生活","slug":"生活","permalink":"http://liuazhang.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://liuazhang.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"数据链路层","slug":"数据链路层","permalink":"http://liuazhang.com/tags/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"},{"name":"网络编程","slug":"网络编程","permalink":"http://liuazhang.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"物理层","slug":"物理层","permalink":"http://liuazhang.com/tags/%E7%89%A9%E7%90%86%E5%B1%82/"},{"name":"概述","slug":"概述","permalink":"http://liuazhang.com/tags/%E6%A6%82%E8%BF%B0/"},{"name":"hexo","slug":"hexo","permalink":"http://liuazhang.com/tags/hexo/"},{"name":"随笔","slug":"随笔","permalink":"http://liuazhang.com/tags/%E9%9A%8F%E7%AC%94/"}]}